suite: CD Server Init Job Tests
templates:
  - server-job-init.yaml
values:
  - enable-cluster.yaml
tests:
  - it: should create Server Init Job if clusteredMode is enabled
    asserts:
      - hasDocuments: { count: 1 }
      - isKind: { of: Job }

  - it: should not create Server Init Job if clusteredMode is disabled
    set:
      clusteredMode: false
    asserts:
      - hasDocuments: { count: 0 }

  # Image tests
  - it: should create Server Init Job with the values from `global.cloudbees` section if specified
    set:
      global.cloudbees:
        imageRegistry: global-test-registry.test
        imageTag: global-test-tag
      # Values from flow cloudbees-flow chart images section
      images:
        registry: chart-images-registry.test
        tag: chart-images-tag
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: global-test-registry.test/cbflow-server:global-test-tag

  - it: should create Server Init Job with the values on `images` section if `global.cloudbees` section is not specified
    set:
      global.cloudbees: { }
      # Values from flow cloudbees-flow chart images section
      images:
        registry: chart-images-registry.test
        tag: chart-images-tag
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: chart-images-registry.test/cbflow-server:chart-images-tag

  - it: should create Server Init Job with the values from `images` section if `global.cloudbees` is empty
    set:
      global.cloudbees:
        imageRegistry:
        imageTag:
      # Values from flow cloudbees-flow chart images section
      images:
        registry: chart-images-registry.test
        tag: chart-images-tag
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value:  chart-images-registry.test/cbflow-server:chart-images-tag

  - it: should create Server Init Job with the image from server.imageRepository
    set:
      global.cloudbees:
        imageRegistry:
        imageTag:
      images:
        registry: chart-images-registry.test
        tag: chart-images-tag
      server:
        imageRepository: custom-cbflow-server
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: chart-images-registry.test/custom-cbflow-server:chart-images-tag
          
  # Security Context tests
  - it: securityContext doesn't exist by default
    asserts:
      - hasDocuments: { count: 1 }
      - isKind: { of: Job }
      - equal:
          path: metadata.name
          value: flow-server-init-job
      - notExists:
          path: spec.template.spec.securityContext
      - notExists:
          path: spec.template.spec.containers[0].securityContext

  - it: User can enable podSecurityContext
    set:
      securityContext:
        enabled: true
    asserts:
      - hasDocuments: { count: 1 }
      - isKind: { of: Job }
      - equal:
          path: spec.template.spec.securityContext.runAsUser
          value: 1000
      - equal:
          path: spec.template.spec.securityContext.fsGroup
          value: 1000
      - equal:
          path: spec.template.spec.containers[0].securityContext
          value: { }

  - it: User can set podSecurityContext
    set:
      securityContext:
        enabled: true
        fsGroup: 10001
        fsGroupChangePolicy: "OnRootMismatch"
        runAsGroup: 10002
        runAsNonRoot: true
        runAsUser: 10003
        seLinuxOptions:
          level: s0:c123,c456
          role: role1
          type: type1
          user: user1
        seccompProfile:
          type: RuntimeDefault
        supplementalGroups: [ 10005, 10006 ]
        sysctls:
          - name: net.core.somaxconn
            value: "1024"
          - name: net.ipv4.tcp_syncookies
            value: "1"
    asserts:
      - hasDocuments: { count: 1 }
      - isKind: { of: Job }
      - equal:
          path: spec.template.spec.securityContext
          value:
            fsGroup: 10001
            fsGroupChangePolicy: "OnRootMismatch"
            runAsGroup: 10002
            runAsNonRoot: true
            runAsUser: 10003
            seLinuxOptions:
              level: s0:c123,c456
              role: role1
              type: type1
              user: user1
            seccompProfile:
              type: RuntimeDefault
            supplementalGroups: [ 10005, 10006 ]
            sysctls:
              - name: net.core.somaxconn
                value: "1024"
              - name: net.ipv4.tcp_syncookies
                value: "1"

  - it: User can set containerSecurityContext
    set:
      securityContext:
        enabled: true
      containerSecurityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop: [ "ALL" ]
        privileged: false
        procMount: "Default"
        readOnlyRootFilesystem: true
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10004
        seLinuxOptions:
          level: s0:c123,c456
          role: role1
          type: type1
          user: user1
        seccompProfile:
          type: RuntimeDefault
    asserts:
      - hasDocuments: { count: 1 }
      - isKind: { of: Job }
      - equal:
          path: spec.template.spec.securityContext
          value:
            runAsUser: 1000
            fsGroup: 1000
      - equal:
          path: spec.template.spec.containers[0].securityContext
          value:
            allowPrivilegeEscalation: false
            capabilities:
              drop: [ "ALL" ]
            privileged: false
            procMount: "Default"
            readOnlyRootFilesystem: true
            runAsGroup: 10001
            runAsNonRoot: true
            runAsUser: 10004
            seLinuxOptions:
              level: s0:c123,c456
              role: role1
              type: type1
              user: user1
            seccompProfile:
              type: RuntimeDefault

  - it: User can set podSecurityContext and containerSecurityContext
    set:
      securityContext:
        enabled: true
        fsGroup: 10001
        runAsUser: 10002
        runAsNonRoot: true
        fsGroupChangePolicy: "OnRootMismatch"
        seLinuxOptions:
          level: s0:c123,c456
          role: role1
          type: type1
          user: user1
        seccompProfile:
          type: RuntimeDefault
        supplementalGroups: [ 10005, 10006 ]
        sysctls:
          - name: net.core.somaxconn
            value: "1024"
          - name: net.ipv4.tcp_syncookies
            value: "1"
      containerSecurityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop: [ "ALL" ]
        privileged: false
        procMount: "Default"
        readOnlyRootFilesystem: true
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10004
        seLinuxOptions:
          level: s0:c123,c456
          role: role1
          type: type1
          user: user1
        seccompProfile:
          type: RuntimeDefault
    asserts:
      - hasDocuments: { count: 1 }
      - isKind: { of: Job }
      - equal:
          path: spec.template.spec.securityContext
          value:
            fsGroup: 10001
            runAsUser: 10002
            runAsNonRoot: true
            fsGroupChangePolicy: "OnRootMismatch"
            seLinuxOptions:
              level: s0:c123,c456
              role: role1
              type: type1
              user: user1
            seccompProfile:
              type: RuntimeDefault
            supplementalGroups: [ 10005, 10006 ]
            sysctls:
              - name: net.core.somaxconn
                value: "1024"
              - name: net.ipv4.tcp_syncookies
                value: "1"
      - equal:
          path: spec.template.spec.containers[0].securityContext
          value:
            allowPrivilegeEscalation: false
            capabilities:
              drop: [ "ALL" ]
            privileged: false
            procMount: "Default"
            readOnlyRootFilesystem: true
            runAsGroup: 10001
            runAsNonRoot: true
            runAsUser: 10004
            seLinuxOptions:
              level: s0:c123,c456
              role: role1
              type: type1
              user: user1
            seccompProfile:
              type: RuntimeDefault

  - it: User can set securityContext runAsUser=0
    set:
      securityContext:
        enabled: true
        runAsUser: 0
    asserts:
      - hasDocuments: { count: 1 }
      - isKind: { of: Job }
      - equal:
          path: spec.template.spec.securityContext
          value:
            fsGroup: 1000
            runAsUser: 0

  - it: User can set securityContext fsGroup=0
    set:
      securityContext:
        enabled: true
        fsGroup: 0
    asserts:
      - hasDocuments: { count: 1 }
      - isKind: { of: Job }
      - equal:
          path: spec.template.spec.securityContext
          value:
            fsGroup: 0
            runAsUser: 1000