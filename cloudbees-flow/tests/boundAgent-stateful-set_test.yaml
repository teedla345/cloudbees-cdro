suite: CD Bound Agent StatefulSet Tests
templates:
  - charts/boundAgent/templates/stateful-set.yaml
tests:
# Image tests
  - it: should create Bound Agent StatefulSet with the cloudbees-flow-agent chart values by default if global.cloudbees doesn't exist
    asserts:
      - hasDocuments: { count: 1 }
      - isKind: { of: StatefulSet }
      - matchRegex:
          path: spec.template.spec.containers[0].image
          pattern: docker.io/cloudbees/cbflow-agent:*

  - it: should create Bound Agent StatefulSet with the cloudbees-flow-agent chart values by default if global.cloudbees is not specified
    set:
      global.cloudbees: { }
    asserts:
      - hasDocuments: { count: 1 }
      - isKind: { of: StatefulSet }
      - matchRegex:
          path: spec.template.spec.containers[0].image
          pattern: docker.io/cloudbees/cbflow-agent:*

  - it: should create Bound Agent StatefulSet with the values on `images` section if `global.cloudbees` section is not specified
    set:
      global.cloudbees: { }
      boundAgent:
        images:
          # `registry` value is expected to be applied if global.cloudbees is not specified
          registry: images-registry.test
          imageRepository: images-flow-agent
          # `tag` value is expected to be applied if global.cloudbees is not specified
          tag: images-tag
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: images-registry.test/images-flow-agent:images-tag

  - it: should create Bound Agent StatefulSet with the values on `images` section if `global.cloudbees` section is empty
    set:
      global:
        cloudbees:
          imageRegistry:
          imageTag:
      boundAgent:
        # Values from flow cloudbees-flow-agent chart images section
        images:
          # `registry` value is expected to be applied if global.cloudbees.imageRegistry is empty
          registry: images-registry.test
          imageRepository: images-flow-agent
          # `tag` value is expected to be applied if global.cloudbees.imageTag is empty
          tag: images-test-tag
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: images-registry.test/images-flow-agent:images-test-tag

  - it: should create Bound Agent StatefulSet with the values from `global.cloudbees` section if specified
    set:
      global.cloudbees:
        imageRegistry: global-test-registry.test
        imageTag: global-test-tag
      # Values from flow cloudbees-flow chart images section
      # the cloudbees-flow chart images section is not used for all cases in the cloudbees-flow-agent chart
      images:
        registry: chart-images-registry.test
        tag: chart-images-tag
      boundAgent:
        # Values from flow cloudbees-flow-agent chart images section
        images:
          # `registry` value is expected to be ignored if global.cloudbees.imageRegistry is specified
          registry: images-registry.test
          imageRepository: images-flow-agent
          # `tag` value is expected to be ignored if global.cloudbees.imageTag is specified
          tag: images-test-tag
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: global-test-registry.test/images-flow-agent:global-test-tag

# Security Context tests
  - it: securityContext doesn't exist by default
    asserts:
      - hasDocuments: { count: 1 }
      - isKind: { of: StatefulSet }
      - equal:
          path: metadata.name
          value: cb-flow-bound-agent-flow-agent
      - notExists:
          path: spec.template.spec.securityContext
      - notExists:
          path: spec.template.spec.containers[0].securityContext

  - it: User can enable podSecurityContext
    set:
      boundAgent:
        securityContext:
          enabled: true
    asserts:
      - hasDocuments: { count: 1 }
      - isKind: { of: StatefulSet }
      - equal:
          path: spec.template.spec.securityContext.runAsUser
          value: 1000
      - equal:
          path: spec.template.spec.securityContext.fsGroup
          value: 1000
      - equal:
          path: spec.template.spec.containers[0].securityContext
          value: {}

  - it: User can set podSecurityContext
    set:
      boundAgent:
        securityContext:
          enabled: true
          fsGroup: 10001
          fsGroupChangePolicy: "OnRootMismatch"
          runAsGroup: 10002
          runAsNonRoot: true
          runAsUser: 10003
          seLinuxOptions:
            level: s0:c123,c456
            role: role1
            type: type1
            user: user1
          seccompProfile:
            type: RuntimeDefault
          supplementalGroups: [ 10005, 10006 ]
          sysctls:
            - name: net.core.somaxconn
              value: "1024"
            - name: net.ipv4.tcp_syncookies
              value: "1"
    asserts:
      - hasDocuments: { count: 1 }
      - isKind: { of: StatefulSet }
      - equal:
          path: spec.template.spec.securityContext
          value:
            fsGroup: 10001
            fsGroupChangePolicy: "OnRootMismatch"
            runAsGroup: 10002
            runAsNonRoot: true
            runAsUser: 10003
            seLinuxOptions:
              level: s0:c123,c456
              role: role1
              type: type1
              user: user1
            seccompProfile:
              type: RuntimeDefault
            supplementalGroups: [ 10005, 10006 ]
            sysctls:
              - name: net.core.somaxconn
                value: "1024"
              - name: net.ipv4.tcp_syncookies
                value: "1"

  - it: User can set containerSecurityContext
    set:
      boundAgent:
        securityContext:
          enabled: true
        containerSecurityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: [ "ALL" ]
          privileged: false
          procMount: "Default"
          readOnlyRootFilesystem: true
          runAsGroup: 10001
          runAsNonRoot: true
          runAsUser: 10004
          seLinuxOptions:
            level: s0:c123,c456
            role: role1
            type: type1
            user: user1
          seccompProfile:
            type: RuntimeDefault
    asserts:
      - hasDocuments: { count: 1 }
      - isKind: { of: StatefulSet }
      - equal:
          path: spec.template.spec.securityContext
          value:
            runAsUser: 1000
            fsGroup: 1000
      - equal:
          path: spec.template.spec.containers[0].securityContext
          value:
            allowPrivilegeEscalation: false
            capabilities:
              drop: [ "ALL" ]
            privileged: false
            procMount: "Default"
            readOnlyRootFilesystem: true
            runAsGroup: 10001
            runAsNonRoot: true
            runAsUser: 10004
            seLinuxOptions:
              level: s0:c123,c456
              role: role1
              type: type1
              user: user1
            seccompProfile:
              type: RuntimeDefault

  - it: User can set podSecurityContext and containerSecurityContext
    set:
      boundAgent:
        securityContext:
          enabled: true
          fsGroup: 10001
          runAsUser: 10002
          runAsNonRoot: true
          fsGroupChangePolicy: "OnRootMismatch"
          seLinuxOptions:
            level: s0:c123,c456
            role: role1
            type: type1
            user: user1
          seccompProfile:
            type: RuntimeDefault
          supplementalGroups: [ 10005, 10006 ]
          sysctls:
            - name: net.core.somaxconn
              value: "1024"
            - name: net.ipv4.tcp_syncookies
              value: "1"
        containerSecurityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: [ "ALL" ]
          privileged: false
          procMount: "Default"
          readOnlyRootFilesystem: true
          runAsGroup: 10001
          runAsNonRoot: true
          runAsUser: 10004
          seLinuxOptions:
            level: s0:c123,c456
            role: role1
            type: type1
            user: user1
          seccompProfile:
            type: RuntimeDefault
    asserts:
      - hasDocuments: { count: 1 }
      - isKind: { of: StatefulSet }
      - equal:
          path: spec.template.spec.securityContext
          value:
            fsGroup: 10001
            runAsUser: 10002
            runAsNonRoot: true
            fsGroupChangePolicy: "OnRootMismatch"
            seLinuxOptions:
              level: s0:c123,c456
              role: role1
              type: type1
              user: user1
            seccompProfile:
              type: RuntimeDefault
            supplementalGroups: [ 10005, 10006 ]
            sysctls:
              - name: net.core.somaxconn
                value: "1024"
              - name: net.ipv4.tcp_syncookies
                value: "1"
      - equal:
          path: spec.template.spec.containers[0].securityContext
          value:
            allowPrivilegeEscalation: false
            capabilities:
              drop: [ "ALL" ]
            privileged: false
            procMount: "Default"
            readOnlyRootFilesystem: true
            runAsGroup: 10001
            runAsNonRoot: true
            runAsUser: 10004
            seLinuxOptions:
              level: s0:c123,c456
              role: role1
              type: type1
              user: user1
            seccompProfile:
              type: RuntimeDefault

  - it: User can set securityContext runAsUser=0
    set:
      boundAgent:
        securityContext:
          enabled: true
          runAsUser: 0
    asserts:
      - hasDocuments: { count: 1 }
      - isKind: { of: StatefulSet }
      - equal:
          path: spec.template.spec.securityContext
          value:
            fsGroup: 1000
            runAsUser: 0

  - it: User can set securityContext fsGroup=0
    set:
      boundAgent:
        securityContext:
          enabled: true
          fsGroup: 0
    asserts:
      - hasDocuments: { count: 1 }
      - isKind: { of: StatefulSet }
      - equal:
          path: spec.template.spec.securityContext
          value:
            fsGroup: 0
            runAsUser: 1000
